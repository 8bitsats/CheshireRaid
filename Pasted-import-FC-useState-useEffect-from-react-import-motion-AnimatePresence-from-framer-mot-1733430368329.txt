import { FC, useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { fetchTrendingTokens, Token } from '../services/solanaTracker';

const TrendingTokens: FC = () => {
  const [tokens, setTokens] = useState<Token[]>([]);
  const [timeframe, setTimeframe] = useState<'15m' | '1h' | '24h'>('1h');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadTokens = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await fetchTrendingTokens(timeframe);
        setTokens(data);
      } catch (err) {
        setError('Failed to load trending tokens');
        console.error('Trending tokens error:', err);
      } finally {
        setIsLoading(false);
      }
    };

    loadTokens();
    const interval = setInterval(loadTokens, 60000); // Refresh every minute
    return () => clearInterval(interval);
  }, [timeframe]);

  const formatNumber = (num: number) => {
    if (num >= 1e9) return `${(num / 1e9).toFixed(2)}B`;
    if (num >= 1e6) return `${(num / 1e6).toFixed(2)}M`;
    if (num >= 1e3) return `${(num / 1e3).toFixed(2)}K`;
    return num.toFixed(2);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center text-red-400 py-8">
        <p>{error}</p>
        <button 
          onClick={() => setTimeframe(timeframe)} 
          className="mt-4 px-4 py-2 bg-purple-600 rounded-md hover:bg-purple-700 transition-colors"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg p-6 shadow-lg">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Trending Tokens</h2>
        <div className="flex gap-2">
          {(['15m', '1h', '24h'] as const).map((tf) => (
            <button
              key={tf}
              onClick={() => setTimeframe(tf)}
              className={`px-3 py-1 rounded-md transition-colors ${
                timeframe === tf 
                  ? 'bg-purple-600 text-white' 
                  : 'bg-gray-700 hover:bg-gray-600'
              }`}
            >
              {tf}
            </button>
          ))}
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="text-left border-b border-gray-700">
              <th className="p-4">Token</th>
              <th className="p-4">Price</th>
              <th className="p-4">Change</th>
              <th className="p-4">Volume</th>
              <th className="p-4">Market Cap</th>
              <th className="p-4">Holders</th>
            </tr>
          </thead>
          <tbody>
            <AnimatePresence mode="sync">
              {tokens.map((token, index) => (
                <motion.tr
                  key={token.address}
                  className="border-b border-gray-700 hover:bg-gray-700/50 transition-colors"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: index * 0.05 }}
                >
                  <td className="p-4">
                    <div className="flex items-center space-x-3">
                      {token.image && (
                        <img
                          src={token.image}
                          alt={token.name}
                          className="w-8 h-8 rounded-full"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/placeholder.png';
                          }}
                        />
                      )}
                      <div>
                        <div className="font-medium">{token.symbol}</div>
                        <div className="text-sm text-gray-400">{token.name}</div>
                      </div>
                    </div>
                  </td>
                  <td className="p-4 font-mono">${token.price.toFixed(6)}</td>
                  <td className="p-4">
                    <span className={token.price_change >= 0 ? 'text-green-400' : 'text-red-400'}>
                      {token.price_change >= 0 ? '+' : ''}{token.price_change.toFixed(2)}%
                    </span>
                  </td>
                  <td className="p-4">${formatNumber(token.volume)}</td>
                  <td className="p-4">${formatNumber(token.market_cap)}</td>
                  <td className="p-4">{formatNumber(token.holders)}</td>
                </motion.tr>
              ))}
            </AnimatePresence>
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default TrendingTokens;